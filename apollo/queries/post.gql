#import "~/apollo/fragments/listingPost.gql"

query fetchPostBySlug($slug: String!) {
  allPosts(where: { slug: $slug }) {
    style
    name
    brief
    briefApiData
    contentApiData
    publishTime
    updatedAt
    source
    isAdult
    heroImage {
      tiny: urlTinySized
      mobile: urlMobileSized
      desktop: urlDesktopSized
    }
    heroVideo {
      youtubeUrl
    }
    heroCaption
    categories {
      slug
      name
    }
    writers {
      name
      slug
    }
    photographers {
      name
      slug
    }
    cameraOperators {
      name
      slug
    }
    designers {
      name
      slug
    }
    engineers {
      name
      slug
    }
    vocals {
      name
      slug
    }
    otherbyline
    tags {
      name
    }
    relatedPosts {
      slug
      state
      name
    }
  }
}

query FetchLatestPostsForAside(
  $first: Int = 5,
  $filteredSlug: [String] = [""],
) {
  allPosts(
    where: {
      slug_not_in: $filteredSlug,
      categories_every: {
        slug_not_in: "ombuds"
      },
      state: published
    },
    first: $first,
    sortBy: publishTime_DESC,
  ) {
    ...listingPost
  }
}

query fetchPostsByCategorySlug(
  $categorySlug: String!,
  $first: Int = 13,
  $skip: Int = 0,
  $withCount: Boolean = false,
  $filteredSlug: [String] = [""],
) {
  allPosts(
    where: {
      state: published,
      slug_not_in: $filteredSlug,
      categories_some: {
        slug: $categorySlug
      }
    }
    first: $first,
    skip: $skip,
    sortBy: publishTime_DESC,
  ) {
    publishTime
    ...listingPost
  }

  _allPostsMeta(
    where: {
      state: published,
      slug_not_in: $filteredSlug,
      categories_some: {
        slug: $categorySlug
      }
    }
  ) @include(if: $withCount) {
    count
  }
}

query fetchPostsByTagName (
  $tagName: String!,
  $first: Int = 12,
  $skip: Int = 0,
  $withCount: Boolean = false,
  $filteredSlug: [String] = [""],
) {
  allPosts(
    where: {
      state: published,
      slug_not_in: $filteredSlug,
      categories_every: {
        slug_not_in: "ombuds"
      }
      tags_some: {
        name: $tagName
      }
    },
    first: $first,
    skip: $skip,
    sortBy: publishTime_DESC,
  ) {
    publishTime
    ...listingPost
  }
  _allPostsMeta(
    where: {
      state: published,
      slug_not_in: $filteredSlug,
      categories_every: {
        slug_not_in: "ombuds"
      }
      tags_some: {
        name: $tagName
      }
    },
  ) @include(if: $withCount) {
    count
  }
}

query fetchVideoPostsByCategorySlug (
  $category: String!,
  $first: Int = 10,
  $skip: Int = 0,
  $style: PostStyleType,
  $withCount: Boolean = false,
  $filteredSlug: [String] = [""],
) {
  allPosts(
    where: {
      categories_some: {
        slug: $category
      },
      state: published,
      slug_not_in: $filteredSlug,
      categories_every: {
        slug_not_in: "ombuds"
      }
      style: $style
    },
    first: $first,
    skip: $skip,
    sortBy: publishTime_DESC,
  ) {
    ...listingPost
  }
  _allPostsMeta(
    where: {
      categories_some: {
        slug: $category
      },
      state: published,
      slug_not_in: $filteredSlug,
      categories_every: {
        slug_not_in: "ombuds"
      }
      style: $style
    },
  ) @include(if: $withCount) {
    count
  }
}

query fetchPosts(
  $first: Int = 12,
  $skip: Int = 0,
  $withCount: Boolean = false,
  $filteredSlug: [String] = [""],
) {
  allPosts(
    where: {
      state: published,
      slug_not_in: $filteredSlug,
      categories_every: {
        slug_not_in: "ombuds"
      }
      style_not_in: [wide, projects, script, campaign, readr]
    },
    first: $first,
    skip: $skip,
    sortBy: publishTime_DESC,
  ) {
    publishTime
    categories {
      slug
      name
    }
    ...listingPost
    heroVideo {
      coverPhoto {
        urlMobileSized
      }
    }
  }

  _allPostsMeta(
    where: {
      state: published,
      slug_not_in: $filteredSlug,
      categories_every: {
        slug_not_in: "ombuds"
      }
      style_not_in: [wide, projects, script, campaign, readr]
    }
  ) @include(if: $withCount) {
    count
  }
}
